{"version":3,"file":"bundle.js","mappings":"mBAsFoB,IAvEpB,MASE,WAAAA,CAAYC,GACVC,KAAKC,YAAcF,EAAoBE,YACvCD,KAAKE,WAAaH,EAAoBG,WACtCF,KAAKG,WAAaJ,EAAoBI,WACtCH,KAAKI,YAAcL,EAAoBK,YACvCJ,KAAKK,OAASN,EAAoBM,OAClCL,KAAKM,KAAOP,EAAoBO,KAChCN,KAAKO,WAAaR,EAAoBQ,UACxC,CACA,eAAAC,CAAgBC,GAEd,MAAMC,KAASD,EAAW,MACpBE,KAAWF,EAAW,KAAQ,IAC9BG,IAASH,EAAW,GAG1B,IAAII,EAAM,GASV,OAPIH,EAAM,IACRG,GAAYH,EAAM,KAAOC,EAAO,GAAK,IAAM,KAG7CE,GAAYF,EAAO,KAAOC,EAAO,GAAK,IAAM,IAC5CC,GAAO,GAAKD,EAELC,CACT,CACA,UAAAC,GACKd,KAAKC,YAAYc,QAClBf,KAAKC,YAAYe,OACjBhB,KAAKE,WAAWe,UAAY,UAE5BjB,KAAKC,YAAYiB,QACjBlB,KAAKE,WAAWe,UAAY,OAEhC,CACA,gBAAAE,GACAnB,KAAKE,WAAWkB,iBAAiB,SAAS,KACxCpB,KAAKc,YAAY,IAEnBd,KAAKG,WAAWiB,iBAAiB,SAAQ,KACvCpB,KAAKC,YAAYiB,QACjBlB,KAAKC,YAAYoB,YAAc,EAC/BrB,KAAKE,WAAWe,UAAY,MAAM,IAEpCjB,KAAKC,YAAYmB,iBAAiB,cAAc,KAC9C,MAAME,EAAWC,KAAKC,MAAMxB,KAAKC,YAAYoB,aAC7CrB,KAAKI,YAAYa,UAAYjB,KAAKQ,gBAAgBc,GAAUG,UAAU,IAExEzB,KAAKK,OAAOe,iBAAiB,SAAQ,KACnCpB,KAAKC,YAAYoB,aAAe,CAAC,IAEnCrB,KAAKM,KAAKc,iBAAiB,SAAQ,KACjCpB,KAAKC,YAAYoB,aAAe,CAAC,IAEnCrB,KAAKO,WAAWa,iBAAiB,SAAQ,KACvCpB,KAAKC,YAAYyB,aAAe,EAChC1B,KAAKC,YAAYyB,aAAgD,EAAhC1B,KAAKC,YAAYyB,YAAiB,GAErE,GAGkC,CAClCzB,YAAa0B,SAASC,cAAc,UACpC1B,WAAWyB,SAASC,cAAc,SAClCzB,WAAYwB,SAASC,cAAc,SACnCxB,YAAauB,SAASC,cAAc,aACpCvB,OAAQsB,SAASC,cAAc,WAC/BtB,KAAMqB,SAASC,cAAc,SAC7BrB,WAAYoB,SAASC,cAAc,iBAGzBT,kB","sources":["webpack://cursots/./src/interfaces-classes-video/index.ts"],"sourcesContent":["interface VideoPlayerElements{\n  videoPlayer: HTMLVideoElement;\n  playButton: HTMLButtonElement;\n  stopButton: HTMLButtonElement;\n  progressBar: HTMLParagraphElement;\n  frente: HTMLButtonElement;\n  tras: HTMLButtonElement;\n  velocidade: HTMLButtonElement;\n}\n\ninterface VideoPlayerProtocol {\n  playToggle(): void;\n  executarPrograma(): void;\n}\n\nexport default class VideoPlayer implements VideoPlayerProtocol{\n  private videoPlayer: HTMLVideoElement;\n  private playButton: HTMLButtonElement;\n  private stopButton: HTMLButtonElement;\n  private progressBar: HTMLParagraphElement;\n  private frente: HTMLButtonElement;\n  private tras: HTMLButtonElement;\n  private velocidade: HTMLButtonElement;\n\n  constructor(videoPlayerElements: VideoPlayerElements){\n    this.videoPlayer = videoPlayerElements.videoPlayer;\n    this.playButton = videoPlayerElements.playButton;\n    this.stopButton = videoPlayerElements.stopButton;\n    this.progressBar = videoPlayerElements.progressBar;\n    this.frente = videoPlayerElements.frente;\n    this.tras = videoPlayerElements.tras;\n    this.velocidade = videoPlayerElements.velocidade;\n  }\n  fancyTimeFormat(duration: number) {\n    // Hours, minutes and seconds\n    const hrs = ~~(duration / 3600);\n    const mins = ~~((duration % 3600) / 60);\n    const secs = ~~duration % 60;                    // ~~ transforma em INTEGER... INSANO..\n\n    // Output like \"1:01\" or \"4:03:59\" or \"123:03:59\"\n    let ret = \"\";\n\n    if (hrs > 0) {\n      ret += \"\" + hrs + \":\" + (mins < 10 ? \"0\" : \"\");\n    }\n\n    ret += \"\" + mins + \":\" + (secs < 10 ? \"0\" : \"\");\n    ret += \"\" + secs;\n\n    return ret;\n  }\n  playToggle(): void{\n    if(this.videoPlayer.paused){\n      this.videoPlayer.play();\n      this.playButton.innerText = 'Pause';\n    }else{\n      this.videoPlayer.pause();\n      this.playButton.innerText = 'Play'\n    }\n  }\n  executarPrograma(): void{\n  this.playButton.addEventListener('click', () => {\n    this.playToggle();\n  });\n  this.stopButton.addEventListener('click',() => {\n    this.videoPlayer.pause();\n    this.videoPlayer.currentTime = 0;\n    this.playButton.innerText = 'Play'\n  })\n  this.videoPlayer.addEventListener('timeupdate', () => {\n    const progress = Math.trunc(this.videoPlayer.currentTime); // pra transformar em integer\n    this.progressBar.innerText = this.fancyTimeFormat(progress).toString()\n  });\n  this.frente.addEventListener('click',() => {\n    this.videoPlayer.currentTime += 5\n  })\n  this.tras.addEventListener('click',() => {\n    this.videoPlayer.currentTime -= 5\n  })\n  this.velocidade.addEventListener('click',() => {\n    this.videoPlayer.playbackRate = 1.0\n    this.videoPlayer.playbackRate = (this.videoPlayer.playbackRate * 4)\n  })\n  }\n}\n\nconst videoPlayer = new VideoPlayer({\n  videoPlayer: document.querySelector('.video') as HTMLVideoElement,\n  playButton:document.querySelector('.play') as HTMLButtonElement,\n  stopButton: document.querySelector('.stop') as HTMLButtonElement,\n  progressBar: document.querySelector('.progress') as HTMLParagraphElement,\n  frente: document.querySelector('.frente') as HTMLButtonElement,\n  tras: document.querySelector('.tras') as HTMLButtonElement,\n  velocidade: document.querySelector('.velocidade') as HTMLButtonElement\n})\n\nvideoPlayer.executarPrograma();\n"],"names":["constructor","videoPlayerElements","this","videoPlayer","playButton","stopButton","progressBar","frente","tras","velocidade","fancyTimeFormat","duration","hrs","mins","secs","ret","playToggle","paused","play","innerText","pause","executarPrograma","addEventListener","currentTime","progress","Math","trunc","toString","playbackRate","document","querySelector"],"sourceRoot":""}